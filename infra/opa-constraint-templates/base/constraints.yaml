apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8spodbadimagetag
spec:
  crd:
    spec:
      names:
        kind: K8sPodBadImageTag
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties: {}
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spodbadimagetag

        import future.keywords.contains
        import future.keywords.if
        import future.keywords.in

        violation[{"msg": msg}] {
          input.review.kind.kind == "Pod"
          some container in input.review.object.spec.containers
          msg := bad_tag(container.image)
        }

        forbidden_tags := ["latest", "dev"]

        bad_tag(image) = msg {
          tag := forbidden_tags[_]
          endswith(image, sprintf(":%v", [tag]))
          msg := sprintf("Image '%v' uses the forbidden tag '%v'", [image, tag])
        }

        bad_tag(image) = msg {
          not contains(image, ":")
          msg := sprintf("Image '%v' does not use tag", [image])
        }
